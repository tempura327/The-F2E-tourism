module.exports = {
  extends: [
    'stylelint-config-standard',
    'stylelint-config-standard-scss',
    'stylelint-config-prettier-scss',
    'stylelint-config-html/html',
    'stylelint-config-html/vue',
    'stylelint-config-recommended-vue',
    'stylelint-config-prettier',
  ],
  plugins: ['stylelint-order'],
  overrides: [
    {
      files: ['**/*.(scss|css|html|vue)'],
      customSyntax: 'postcss-scss',
    },
    {
      files: ['**/*.(html|vue)'],
      customSyntax: 'postcss-html',
    },
  ],
  rules: {
    'at-rule-no-unknown': null,
    'function-no-unknown': [true, { ignoreFunctions: ['if', 'map.get', 'color.adjust'] }],
    'scss/at-rule-no-unknown': [true, { ignoreAtRules: ['tailwind'] }],
    'unit-allowed-list': ['px', 'rem', '%', 'vw', 'vh', 's', 'fr', 'deg'],
    // import statement can put after sass module import
    'no-invalid-position-at-import-rule': null,
    // comma should be added in color function. ex: rgba(0, 0, 0, 50%)
    'color-function-notation': 'legacy',
    // use number to present opacity. ex: rgba(0, 0, 0, 0.5)
    'alpha-value-notation': 'number',
    // comma should be added after a argument ex: transform: translate(200, 50);
    'function-comma-space-after': 'always',
    // you should not use more than 1 type in css selector. (ex: .example div input)
    'selector-max-type': 1,
    // you should not use more than 1 * in css selector. (ex: .example * *)
    'selector-max-universal': 1,
    // using kebab case to write class name.
    'selector-type-case': 'lower',
    'property-case': 'lower',
    // allow override bootstrap style
    'no-descending-specificity': null,
    'order/properties-order': [
      'width',
      'height',
      'min-width',
      'min-height',
      'font-size',
      'font-weight',
      'text-align',
      'text-decoration',
      'text-shadow',
      'white-space',
      'list-style',
      'color',
      'background-color',
      'opacity',
      'border',
      'border-radius',
      'margin',
      'margin-top',
      'margin-bottom',
      'margin-left',
      'margin-right',
      'padding',
      'padding-top',
      'padding-bottom',
      'padding-left',
      'padding-right',
      'display',
      'flex-direction',
      'justify-content',
      'justify-items',
      'align-content',
      'align-items',
      'grid-template-rows',
      'grid-template-columns',
      'overflow',
      'overflow-x',
      'overflow-y',
      'position',
      'top',
      'left',
      'z-index',
      'box-shadow',
      'cursor',
      'transform',
      'transition',
      'outline',
    ],
  },
};
